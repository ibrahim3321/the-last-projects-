name: Infra (Terraform)

on:
  workflow_run:
    workflows: [ Build Images ]
    types: [ completed ]
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment"
        type: choice
        required: true
        options: [dev, prod]
        default: dev
      destroy:
        description: "Run terraform destroy instead of apply"
        type: boolean
        default: false

jobs:
  terraform:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide ENV
        id: envsel
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENV=${{ inputs.env }}" >> "$GITHUB_OUTPUT"
          else
            BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
            if [ "$BRANCH" = "main" ]; then echo "ENV=prod" >> "$GITHUB_OUTPUT"; else echo "ENV=dev" >> "$GITHUB_OUTPUT"; fi
          fi

      - name: 🔐 Azure Login (SPN JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Fetch ACR id
        id: acr
        shell: bash
        run: |
          ACR_NAME="${{ secrets.ACR_NAME }}"
          test -n "$ACR_NAME" || { echo "Missing secret ACR_NAME"; exit 1; }
          ACR_ID=$(az acr show -n "$ACR_NAME" --query id -o tsv)
          test -n "$ACR_ID" || { echo "Cannot resolve ACR id"; exit 1; }
          echo "ACR_ID=$ACR_ID" >> "$GITHUB_OUTPUT"

      - name: Export ARM_* for Terraform
        shell: bash
        run: |
          CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          echo ARM_CLIENT_ID=$(echo "$CREDS" | jq -r '.clientId') >> $GITHUB_ENV
          echo ARM_CLIENT_SECRET=$(echo "$CREDS" | jq -r '.clientSecret') >> $GITHUB_ENV
          echo ARM_TENANT_ID=$(echo "$CREDS" | jq -r '.tenantId') >> $GITHUB_ENV
          echo ARM_SUBSCRIPTION_ID=$(echo "$CREDS" | jq -r '.subscriptionId') >> $GITHUB_ENV
          echo ARM_USE_OIDC=false >> $GITHUB_ENV
          echo ARM_USE_MSI=false >> $GITHUB_ENV

      - name: Write env.auto.tfvars
        working-directory: ./terraform
        shell: bash
        run: |
          ENV="${{ steps.envsel.outputs.ENV }}"
          if [ "$ENV" = "prod" ]; then
            printf "%s\n" '${{ secrets.PROD }}' > env.auto.tfvars
          else
            printf "%s\n" '${{ secrets.DEV }}' > env.auto.tfvars
          fi
          echo "acr_id = \"${{ steps.acr.outputs.ACR_ID }}\"" >> env.auto.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: ${{ !inputs.destroy }}
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: ${{ inputs.destroy }}
        working-directory: ./terraform
        run: terraform destroy -auto-approve
