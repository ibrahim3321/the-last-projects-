name: CI → Infra → Deploy (branch-friendly)

on:
  push:
    branches: [ main, feature/ci-cd ]
  workflow_dispatch:
    inputs:
      env:
        description: "dev or prod (overrides branch mapping)"
        type: choice
        options: [dev, prod]
        required: false
      enable_agic:
        description: "Enable AGIC via az aks enable-addons"
        type: choice
        options: [ "yes", "no" ]
        default: "yes"
      pin_sha:
        description: "Pin images to current commit SHA"
        type: choice
        options: [ "yes", "no" ]
        default: "yes"

env:
  REGISTRY_FQDN_SUFFIX: azurecr.io

jobs:
  select-env:
    runs-on: ubuntu-latest
    outputs:
      ENV: ${{ steps.pick.outputs.ENV }}
    steps:
      - name: Choose environment
        id: pick
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.env }}" ]; then
            ENV="${{ github.event.inputs.env }}"
          else
            case "${GITHUB_REF_NAME}" in
              main) ENV=prod ;;
              feature/ci-cd) ENV=dev ;;
              *) ENV=dev ;;
            esac
          fi
          echo "ENV=$ENV" >> $GITHUB_OUTPUT
          echo "Selected ENV=$ENV"

  build:
    needs: [select-env]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      ACR_FQDN: ${{ steps.acr.outputs.ACR_FQDN }}
      IMAGE_TAG_SUFFIX: ${{ steps.meta.outputs.IMAGE_TAG_SUFFIX }}
      ENV: ${{ needs.select-env.outputs.ENV }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Derive ACR FQDN and login
        id: acr
        run: |
          set -euo pipefail
          ACR_NAME="${{ secrets.ACR_NAME }}"
          echo "ACR_FQDN=${ACR_NAME}.${REGISTRY_FQDN_SUFFIX}" >> $GITHUB_OUTPUT
          az acr login --name "${ACR_NAME}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Metadata (labels/tags)
        id: meta
        run: |
          echo "IMAGE_TAG_SUFFIX=${GITHUB_SHA}-${{ needs.select-env.outputs.ENV }}" >> $GITHUB_OUTPUT

      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.acr.outputs.ACR_FQDN }}/backend:latest-${{ needs.select-env.outputs.ENV }}
            ${{ steps.acr.outputs.ACR_FQDN }}/backend:${{ steps.meta.outputs.IMAGE_TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/backend:buildcache
          cache-to: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/backend:buildcache,mode=max

      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.acr.outputs.ACR_FQDN }}/frontend:latest-${{ needs.select-env.outputs.ENV }}
            ${{ steps.acr.outputs.ACR_FQDN }}/frontend:${{ steps.meta.outputs.IMAGE_TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/frontend:buildcache
          cache-to: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/frontend:buildcache,mode=max

      - name: Build & push callmebot-adapter
        uses: docker/build-push-action@v5
        with:
          context: ./aks-yaml/callmebot
          push: true
          tags: |
            ${{ steps.acr.outputs.ACR_FQDN }}/callmebot-adapter:latest-${{ needs.select-env.outputs.ENV }}
            ${{ steps.acr.outputs.ACR_FQDN }}/callmebot-adapter:${{ steps.meta.outputs.IMAGE_TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/callmebot-adapter:buildcache
          cache-to: type=registry,ref=${{ steps.acr.outputs.ACR_FQDN }}/callmebot-adapter:buildcache,mode=max

  infra:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: "true"
    outputs:
      AKS_NAME: ${{ steps.aksnames.outputs.AKS }}
      RG_NAME:  ${{ steps.aksnames.outputs.RG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export ARM env for Service Principal
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          ARM_CLIENT_ID=$(echo "$CREDS" | jq -r '.clientId // .appId')
          ARM_CLIENT_SECRET=$(echo "$CREDS" | jq -r '.clientSecret // .password')
          ARM_TENANT_ID=$(echo "$CREDS" | jq -r '.tenantId // .tenant')
          ARM_SUBSCRIPTION_ID=$(echo "$CREDS" | jq -r '.subscriptionId // .subscription')
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_ENVIRONMENT=public" >> $GITHUB_ENV

      - name: Pull external ACR id
        id: acr
        run: |
          set -euo pipefail
          ACR_ID=$(az acr show -n "${{ secrets.ACR_NAME }}" --query id -o tsv)
          echo "ACR_ID=$ACR_ID" >> $GITHUB_OUTPUT

      - name: Write env.auto.tfvars.json from JSON secret
        working-directory: ./terraform
        run: |
          set -euo pipefail
          ENV="${{ needs.build.outputs.ENV }}"
          if [ "$ENV" = "prod" ]; then
            RAW='${{ secrets.PROD }}'
          else
            RAW='${{ secrets.DEV }}'
          fi
          echo "$RAW" | jq --arg acr_id "${{ steps.acr.outputs.ACR_ID }}" '. + {acr_id:$acr_id}' > env.auto.tfvars.json
          jq -r 'keys[]' env.auto.tfvars.json | sed 's/^/tfvar: /'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init/Plan/Apply
        working-directory: ./terraform
        run: |
          set -euo pipefail
          terraform init -upgrade
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Resolve AKS RG/name from tfvars.json
        id: aksnames
        working-directory: ./terraform
        run: |
          set -euo pipefail
          RG=$(jq -r '.resource_group_name' env.auto.tfvars.json)
          PREFIX=$(jq -r '.resource_prefix' env.auto.tfvars.json)
          echo "RG=$RG" >> $GITHUB_OUTPUT
          echo "AKS=${PREFIX}-aks" >> $GITHUB_OUTPUT

      - name: (Optional) Enable AGIC
        if: ${{ github.event.inputs.enable_agic == 'yes' || github.event_name != 'workflow_dispatch' }}
        run: |
          set -euo pipefail
          AKS_NAME="${{ steps.aksnames.outputs.AKS }}"
          RESOURCE_GROUP="${{ steps.aksnames.outputs.RG }}"
          az aks enable-addons \
            -a ingress-appgw \
            -n "$AKS_NAME" \
            -g "$RESOURCE_GROUP" \
            --appgw-name "${AKS_NAME}-appgw" \
            --appgw-subnet-cidr "10.225.0.0/16"

  deploy:
    needs: [infra, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REGISTRY_FQDN_SUFFIX: azurecr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS kubeconfig
        run: |
          set -euo pipefail
          az aks get-credentials \
            -g "${{ needs.infra.outputs.RG_NAME }}" \
            -n "${{ needs.infra.outputs.AKS_NAME }}" \
            --admin --overwrite-existing

      - name: Install tools (helm, kubeseal, yq, kustomize)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail

          # Helm
          sudo snap install helm --classic

          # Detect arch
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64) ARCH="amd64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            *) echo "Unsupported arch: $ARCH"; exit 1 ;;
          esac

          # ---- kubeseal (resolve asset from GitHub Releases) ----
          KUBSEAL_VERSION="${KUBSEAL_VERSION:-}"
          if [ -n "$GH_TOKEN" ]; then AUTH_H="-H Authorization: Bearer $GH_TOKEN"; else AUTH_H=""; fi

          if [ -z "${KUBSEAL_VERSION}" ]; then
            API_URL="https://api.github.com/repos/bitnami-labs/sealed-secrets/releases/latest"
          else
            API_URL="https://api.github.com/repos/bitnami-labs/sealed-secrets/releases/tags/v${KUBSEAL_VERSION}"
          fi

          echo "Resolving kubeseal asset from: $API_URL"
          DL_URL="$(curl -fsSL $AUTH_H "$API_URL" \
            | jq -r ".assets[]?.browser_download_url | select(test(\"kubeseal-.*-linux-${ARCH}$\"))" \
            | head -n1)"

          if [ -z "${DL_URL}" ] || ! curl -fsSL -o kubeseal "${DL_URL}"; then
            echo "Could not resolve kubeseal asset via API; trying a known-good fallback …"
            FALLBACK_TAG="0.26.1"
            FALLBACK_URL="https://github.com/bitnami-labs/sealed-secrets/releases/download/v${FALLBACK_TAG}/kubeseal-${FALLBACK_TAG}-linux-${ARCH}"
            curl -fsSL -o kubeseal "${FALLBACK_URL}"
          fi

          sudo install -m 0755 kubeseal /usr/local/bin/kubeseal
          /usr/local/bin/kubeseal --version

          # yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_${ARCH}"
          sudo chmod +x /usr/local/bin/yq
          yq --version

          # kustomize
          KUSTOMIZE_VERSION="5.4.2"
          curl -fsSL -o kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_${ARCH}.tar.gz"
          tar -xzf kustomize.tar.gz
          sudo install -m 0755 kustomize /usr/local/bin/kustomize
          kustomize version
